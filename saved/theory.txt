WHAT IS *.DLL

A dll (Dynamic Link Library) is a library that contains code and data that can be used by more than one program at the same time.

We can include .dll file from one project in another, and execute the code from the dll in our app.

We can also decompile .dll files using tools like 'Telerik'.

Dll files can be protected by another external tool called - PreEmptive solutions, this one costs money but offers free trial.


MULTITHREADING ====================================================


SEQUENTIAL PROGRAMMING -
Programs with: 
Start -> Sequence -> End.
are called sequential

WHAT IS A THREAD -
A single thread is a single sequentiao flow of controls within a program.

MULTITHREADING -
Is a type of execution model that allows multiple threads to exist within the process and they execute independently but share their process resources.

ADVANTAGES OF MULTITHREADING - 

Responsivness - Multithreading allows an application to remain responsive

Faster execution - Multithreaded applications operate faster on devices that have multiple CPUs.

Lower resource consumption - Multithreaded applications can handle multiple requests simultaneously using fewer resources.

Better system utilization - multithreaded applications can be doing different tasks at the same time, not in a sequential order.

DISADVANTAGES OF MULTITHREADING -

Complexity - it increases the comlexity of the application.

Difficulty to write code - because you're placing each task on a seperate independent thread.

Difficulty to test code - for the reasons listed above, the code becomes harder to test.

Potential deadlocks - when two or more threads are blocking each other.

CRITICAL SECTION -
of a code, is a section that needs to be executed without being interruppted (by other threads)

RACE CONDITIONS - 
occurs when two or more threads are trying to manipulate the same resource concurrently and the outcome of the execution depends on the particular order in which the access takes place. 
To avoid RACE CONDITIONS, the execution of critical sections must be mutually exclusive.



DEADLOCKS -
occur when thread eneters a waiting state because a requested resource is held by another waiting thread, which in turn is waiting for another held resource from another thread.

Lock keyword -
will ensure that one thread is executing a peice of code at one time. Which means that one thread does not enter a CRITICAL SECTION of code while another thread is in that critical section.



MUTEX -
stands for - mutual exclusion - is an object used to synchronize access to a protected resource.
A mutex's scope is system-wide, while lock and Monitor's scopes are application-wide.


SEMAPHORE - 
acts similar to MUTEX, however it allows us to specify how many threads can be accessed at the same time.

ASYNCHRONOUS PROGRAMMING -
Single Threaded - Thread starts executing a task, it can pause it in the middle and start doing another task.

Multi Threaded - does the same as Single Threaded but in multiple threads.



CONCURRENT COLLECTIONS -
Provide several thread-safe collection classes that should be used in place of corresponding types in the System.Collection and System.Collection.Generic namespaces whenever multiple threads are accessing collection concurrently.





THE PILLARS OF --- OOP --- ====================================================


I - E - P - A

I - Inheritance - classes can be inherited with their props and methods

E - Encapsulation - OOP allows us to store all the related data in one place e.x class Person would store all the person related data such as : name, surname, SayHi etc.

P - Polymorphism - it allows methods to have different definitions depending on arguments passed to it. It makes possible overriding existing methods.


A - Abstraction - Abstraction means, in OOP, we can choose what data to display and what to hide, making it cleaner approach to write code.



Association, Aggregation and Composition ---------------

Association -
    Is a relation between objects.
    Usually described as "is-a" or "using" relationship.
    Both objects have an independent life-cycle.
    Each object owns their actions, and won't affect the other object.


  Example:
    A Teacher teaches a Student. Neither the teacher nor the student depends on the other to exist.


Aggregation - 
    Specialized form of "Association".
    usually described as "has-a" relationship.
    Each object has an independent life-cycle.
    Ownership between objects (one owns another).

  Example:
    A Team has Players. If the team is disbanded, players still exist.


Composition - 
    Is a specialized form of "Aggregation".
    Usually described as "part-of" relationship.
    Child object has a dependent life-cycle.
    Ownership between objects.

  Example:
    A House contains Rooms. If the house is destroyed, the rooms no longer exist.





THE struct VS class ----------------

while class is more general way od defining data, struct should be used to define a short lived, related data.